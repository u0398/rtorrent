#############################################################################
# A minimal rTorrent configuration that provides the basic features
# you want to have in addition to the built-in defaults.
#
# See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
# for an up-to-date version.
#############################################################################

# Instance layout (base paths)
method.insert = cfg.basedir,           private|const|string, (cat,"/")
method.insert = cfg.download,          private|const|string, (cat,(cfg.basedir),"download/")
method.insert = cfg.download_complete, private|const|string, (cat,(cfg.download),"complete/")
method.insert = cfg.session,           private|const|string, (cat,(cfg.basedir),"session/")
method.insert = cfg.watch,             private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.socketdir,         private|const|string, (cat,(cfg.basedir),"socket/")
method.insert = cfg.logs,              private|const|string, (cat,"/var/log/")
method.insert = cfg.info_logfile,      private|const|string, (cat,(cfg.logs),"rtorrent-info.log")
method.insert = cfg.error_logfile,     private|const|string, (cat,(cfg.logs),"rtorrent-error.log")
method.insert = cfg.socketfile,        private|const|string, (cat,(cfg.socketdir),"rtorrent.sock")

# Move logging higher in the config file for easier debugging
# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
#print = (cat, "Logging to ", (cfg.info_logfile), ", ", (cfg.error_logfile))
log.open_file = "info-log", (cfg.info_logfile)
log.add_output = "info", "info-log"
log.open_file = "error-log", (cfg.error_logfile)
log.add_output = "critical", "error-log"
log.add_output = "error", "error-log"
log.add_output = "warn", "error-log"

# Listening port for incoming peer traffic (fixed; you can also randomize it)
network.port_range.set = 49161-49161
network.port_random.set = no

# Tracker-less torrent and UDP tracker support
# (conservative settings for 'private' trackers, change for 'public')
dht.mode.set = disable
#dht.port.set = 49160
protocol.pex.set = no
trackers.use_udp.set = yes

# Peer settings
throttle.max_uploads.set = 100
throttle.max_uploads.global.set = 250

throttle.min_peers.normal.set = 20
throttle.max_peers.normal.set = 60
throttle.min_peers.seed.set = 30
throttle.max_peers.seed.set = 80
trackers.numwant.set = 80

protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300

# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
pieces.memory.max.set = 1800M
network.xmlrpc.size_limit.set = 4M

# Basic operational settings (no need to change these)
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.download))
#log.execute = (cat, (cfg.logs), "execute.log")
#log.xmlrpc = (cat, (cfg.logs), "xmlrpc.log")
execute.nothrow = sh, -c, (cat, "echo >",\
    (session.path), "rtorrent.pid", " ", (system.pid))

# Other operational settings (check & adapt)
encoding.add = utf8
system.umask.set = 0027
#system.cwd.set = (directory.default)
network.http.dns_cache_timeout.set = 25
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))
#pieces.hash.on_completion.set = no
#view.sort_current = seeding, greater=d.ratio=
#keys.layout.set = qwerty
#network.http.capath.set = "/etc/ssl/certs"
#network.http.ssl_verify_peer.set = 0
#network.http.ssl_verify_host.set = 0

# Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
        (cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

## Watch directories (add more as you like, but use unique schedule names)
## Add torrent
schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
## Add & download straight away
schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))

# Move finished (no need for Autotools/Automove plugin on ruTorrent)
method.insert = d.get_finished_dir, simple, "cat=$cfg.download_complete=,$d.custom1="

method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.data_path=,$d.get_finished_dir="

# Erase data when torrent deleted (no need erasedata plugin on ruTorrent)
method.set_key = event.download.erased,delete_erased,"execute=rm,-rf,--,$d.data_path="

## Run the rTorrent process as a daemon in the background
system.daemon.set = true

# In case you want to use a socket instead
network.scgi.open_local = (cfg.socketfile)
execute.nothrow=chmod,"g+w",(cfg.socketfile)


### END of rtorrent.rc ###
